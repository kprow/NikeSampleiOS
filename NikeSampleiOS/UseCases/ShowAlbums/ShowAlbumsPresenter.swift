//
//    ShowAlbumsPresenter.swift
//    NikeSampleiOS
//
//    Created by Andrew Koprowski on 6/28/20.
//    Copyright (c) 2020 Andrew Koprowski. All rights reserved.
//
//    This file was generated by the Clean Swift Xcode Templates so
//    you can apply clean architecture to your iOS and Mac projects,
//    see http://clean-swift.com
//

/// Definition of presentation logic that will be calling the UI.
protocol ShowAlbumsPresentationLogic {

    /// Method to create view models from Album domain models and call the appropriate view display methods.
    /// - Parameter response: The response object containing domain models.
    func presentAlbums(response: ShowAlbums.Fetch.Response)

    /// Method to pass along the album artwork to the appropriate display method.
    /// - Parameter artwork: The artwork data along with it's index.
    func presentAlbumArtwork(artwork: ShowAlbums.Fetch.ArtWork)
}

class ShowAlbumsPresenter: ShowAlbumsPresentationLogic {
    /// Dependency - The view with appropriate display methods.
    /// This is weak to not cause a strong retain cycle that cannot free up memory after scene is de-allocated.
    weak var viewController: ShowAlbumsDisplayLogic?

    // MARK: Fetch albums

    func presentAlbums(response: ShowAlbums.Fetch.Response) {
        let albumViewModels: [ShowAlbums.Fetch.ViewModel.Album] = response.albums.map {
            return ShowAlbums.Fetch.ViewModel.Album(
                name: $0.name ?? Constants.unknownAlbumName,
                artist: $0.artistName ?? Constants.unknownArtistName)
        }
        let viewModel = ShowAlbums.Fetch.ViewModel(albums: albumViewModels)
        viewController?.displayAlbums(viewModel: viewModel)
    }

    func presentAlbumArtwork(artwork: ShowAlbums.Fetch.ArtWork) {
        viewController?.displayAlbumArtwork(artwork: artwork)
    }
}
