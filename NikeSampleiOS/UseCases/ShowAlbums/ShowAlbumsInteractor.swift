//
//    ShowAlbumsInteractor.swift
//    NikeSampleiOS
//
//    Created by Andrew Koprowski on 6/28/20.
//    Copyright (c) 2020 Andrew Koprowski. All rights reserved.
//
//    This file was generated by the Clean Swift Xcode Templates so
//    you can apply clean architecture to your iOS and Mac projects,
//    see http://clean-swift.com
//
import Foundation

/// Definition of business logic performed in this scene.
protocol ShowAlbumsBusinessLogic {
    /// fetch a list of albums from the worker
    /// - Parameter request: the request object to start the request.
    ///         Eventually this will be customized for different purposes, ie) region, result limit etc.
    func fetchAlbums(request: ShowAlbums.Fetch.Request)
}

/// The data associated with this scene, in this case an array of albums.
protocol ShowAlbumsDataStore {
    /// The albums that are the data for this scene.
    var albums: [Album] { get set }
}

class ShowAlbumsInteractor: ShowAlbumsBusinessLogic, ShowAlbumsDataStore {
    /// Dependency - To pass along entity models to be converted into a presentation(view models) object for the view.
    var presenter: ShowAlbumsPresentationLogic?
    /// Dependency - A worker object to handle the calling of the api to fetch data that will become albums
    var worker: ShowAlbumsWorkerProtocol? = ShowAlbumsWorker()
    /// Dependency - A helperi to fetch data that will become album artwork
    var dataCache: DataFetcher? = DataCacheFromUrl()

    var albums: [Album] = []

    // MARK: Fetch Albums

    func fetchAlbums(request: ShowAlbums.Fetch.Request) {
        worker?.fetchFromAPI({ [unowned self](result) in
            if case let Result.success(albums) = result {
                self.albums = albums
                let response = ShowAlbums.Fetch.Response(albums: albums)
                self.presenter?.presentAlbums(response: response)
                albums.enumerated().forEach {
                    self.fetchAlbumArtwork(index: $0, urlString: $1.artworkUrl100)
                }
            }
        })
    }
    private func fetchAlbumArtwork(index: Int, urlString: String?) {
        if let urlString = urlString, let url = URL(string: urlString) {
            dataCache?.getData(from: url, { [unowned self](result) in
                if case let Result.success(artworkImageData) = result {
                    let artwork = ShowAlbums.Fetch.ArtWork(imageData: artworkImageData, index: index)
                    self.presenter?.presentAlbumArtwork(artwork: artwork)
                }
            })
        }
    }
}
