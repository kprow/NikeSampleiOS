//
//    ShowAlbumsViewController.swift
//    NikeSampleiOS
//
//    Created by Andrew Koprowski on 6/28/20.
//    Copyright (c) 2020 Andrew Koprowski. All rights reserved.
//
//    This file was generated by the Clean Swift Xcode Templates so
//    you can apply clean architecture to your iOS and Mac projects,
//    see http://clean-swift.com
//

import UIKit

/// The display logic called by the presenter to displayAlbums
protocol ShowAlbumsDisplayLogic: class {
    /// Sets the view models locally to be displayed by the View Controller
    /// - Parameter viewModel: an array of albums with Name, Artist, and Album Artwork
    func displayAlbums(viewModel: ShowAlbums.Fetch.ViewModel)

    /// Sets the UIImageView with the artwork.
    /// - Parameter artwork: Artwork view model consisting of image data and an index.
    func displayAlbumArtwork(artwork: ShowAlbums.Fetch.ArtWork)
}

/// View Controller to show a list of albums
class ShowAlbumsViewController: UITableViewController, ShowAlbumsDisplayLogic {

    /// Dependency - interactor to start the viper loop with any business logic that must happen in this scene.
    var interactor: ShowAlbumsBusinessLogic?

    /// Dependency - the routing logic  to handle any navigation or presentation of other scenes
    var router: (ShowAlbumsRoutingLogic & ShowAlbumsDataPassing)?

    // MARK: Object lifecycle

    override init(style: UITableView.Style) {
        super.init(style: style)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    /// The setup method is called from any instatiation of this class to create the VIPER architecture for this scene.
    private func setup() {
        let viewController = self
        let interactor = ShowAlbumsInteractor()
        let presenter = ShowAlbumsPresenter()
        let router = ShowAlbumsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = Constants.showAlbmusVCTitle
        tableView.register(AlbumTableViewCell.self, forCellReuseIdentifier: AlbumTableViewCell.reuseIdentifier)
        tableView.rowHeight = UITableView.automaticDimension
        fetchAlbums()
    }

    // MARK: Fetch Albums

    /// The albums to display in the table view.
    var albums: [ShowAlbums.Fetch.ViewModel.Album] = []

    /// Method to start the viper loop to fetch top albums
    func fetchAlbums() {
        let request = ShowAlbums.Fetch.Request()
        interactor?.fetchAlbums(request: request)
    }

    func displayAlbums(viewModel: ShowAlbums.Fetch.ViewModel) {
        albums = viewModel.albums
        tableView.reloadData()
    }
    func displayAlbumArtwork(artwork: ShowAlbums.Fetch.ArtWork) {
        if albums.indices.contains(artwork.index) {
            albums[artwork.index].imageData = artwork.imageData
            tableView.reloadData()
        }
    }
}

// MARK: - UITableViewDataSource

extension ShowAlbumsViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return albums.count
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: AlbumTableViewCell.reuseIdentifier,
            for: indexPath) as? AlbumTableViewCell else {
            return UITableViewCell()
        }
        let currentAlbum = albums[indexPath.row]
        cell.textLabel?.text = currentAlbum.name
        cell.detailTextLabel?.text = currentAlbum.artist
        if let imageData = currentAlbum.imageData {
            cell.albumImage = UIImage(data: imageData)
        } else {
            cell.albumImage = UIImage()
        }
        return cell
    }
}
