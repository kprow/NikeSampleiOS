//
//    ShowAlbumsInteractorTests.swift
//    NikeSampleiOS
//
//    Created by Andrew Koprowski on 6/28/20.
//    Copyright (c) 2020 Andrew Koprowski. All rights reserved.
//
//    This file was generated by the Clean Swift Xcode Templates so
//    you can apply clean architecture to your iOS and Mac projects,
//    see http://clean-swift.com
//

@testable import NikeSampleiOS
import XCTest

class ShowAlbumsInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: ShowAlbumsInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupShowAlbumsInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupShowAlbumsInteractor() {
        sut = ShowAlbumsInteractor()
    }

    // MARK: Test doubles
    class WorkerSpy: ShowAlbumsWorkerProtocol {
        var hasFetchFromAPIBeenCalled = false
        var injectableFetchFromAPIResult: Result<[Album], Error>?
        func fetchFromAPI(_ completionHandler: @escaping (Result<[Album], Error>) -> Void) {
            hasFetchFromAPIBeenCalled = true
            if let result = injectableFetchFromAPIResult {
                completionHandler(result)
            }
        }
    }
    class PresenterSpy: ShowAlbumsPresentationLogic {
        var hasPresentAlbumsBeenCalled = false
        var observePresentAlbumsResponse: ShowAlbums.Fetch.Response?
        func presentAlbums(response: ShowAlbums.Fetch.Response) {
            hasPresentAlbumsBeenCalled = true
            observePresentAlbumsResponse = response
        }
        var hasPresentAlbumArtworkBeenCalled = false
        var observePresentAlbumArtwork: ShowAlbums.Fetch.ArtWork?
        func presentAlbumArtwork(artwork: ShowAlbums.Fetch.ArtWork) {
            hasPresentAlbumArtworkBeenCalled = true
            observePresentAlbumArtwork = artwork
        }
    }
    class DataFetcherSpy: DataFetcher {
        static var dataCache = NSCache<AnyObject, AnyObject>()

        var hasGetDataBeenCalled = false
        var observeGetDataUrl: URL?
        var injectableGetDataResult: Result<Data, Error>?
        func getData(from url: URL, _ completionHandler: @escaping (Result<Data, Error>) -> Void) {
            hasGetDataBeenCalled = true
            observeGetDataUrl = url
            if let result = injectableGetDataResult {
                completionHandler(result)
            }
        }
    }

    // MARK: Tests

    func testFetchAlbumsCallsFetchFromAPI() {
        // Given
        let workerSpy = WorkerSpy()
        sut.worker = workerSpy
        // When
        sut.fetchAlbums(request: ShowAlbums.Fetch.Request())
        // Then
        XCTAssertTrue(workerSpy.hasFetchFromAPIBeenCalled,
                      "When we call fetchAlbums on the interactor it should delegate to the worker.")
    }
    func testFetchAlbumsWithSuccessCallsPresentAlbums() {
        // Given
        let workerSpy = WorkerSpy()
        workerSpy.injectableFetchFromAPIResult = .success([])
        sut.worker = workerSpy
        let presenterSpy = PresenterSpy()
        sut.presenter = presenterSpy
        // When
        sut.fetchAlbums(request: ShowAlbums.Fetch.Request())
        // Then
        XCTAssertTrue(presenterSpy.hasPresentAlbumsBeenCalled,
                      "When we call fetchAlbums and we get a successful response we should call presentAlbums")
    }

    let albumWithArtWork = Album(artistName: "artist name",
                                 id: nil,
                                 releaseDate: nil,
                                 name: "album name",
                                 kind: nil,
                                 copyright: nil,
                                 artistId: nil,
                                 contentAdvisoryRating: nil,
                                 artistUrl: nil,
                                 artworkUrl100: "google.com",
                                 genres: nil,
                                 url: nil)
    func testFetchAlbumsWithSuccesCallGetDataForAlbumArtwork() {
        // Given
        let workerSpy = WorkerSpy()
        workerSpy.injectableFetchFromAPIResult = .success([albumWithArtWork])
        sut.worker = workerSpy
        let presenterSpy = PresenterSpy()
        sut.presenter = presenterSpy
        let dataFetcherSpy = DataFetcherSpy()
        sut.dataCache = dataFetcherSpy
        // When
        sut.fetchAlbums(request: ShowAlbums.Fetch.Request())
        // Then
        XCTAssertTrue(dataFetcherSpy.hasGetDataBeenCalled,
                      "fetchAlbums with a successful response should call getData for the artwork.")
    }
    func testFetchAlbumsWithSuccessfulArtworkDownloadShouldCallPresentArtwork() {
        // Given
        let workerSpy = WorkerSpy()
        workerSpy.injectableFetchFromAPIResult = .success([albumWithArtWork])
        sut.worker = workerSpy
        let presenterSpy = PresenterSpy()
        sut.presenter = presenterSpy
        let dataFetcherSpy = DataFetcherSpy()
        sut.dataCache = dataFetcherSpy
        let givenData = ":)".data(using: .utf8) ?? Data()
        dataFetcherSpy.injectableGetDataResult = .success(givenData)
        let expectedArtwork = ShowAlbums.Fetch.ArtWork(imageData: givenData, index: 0)
        // When
        sut.fetchAlbums(request: ShowAlbums.Fetch.Request())
        // Then
        XCTAssertTrue(presenterSpy.hasPresentAlbumArtworkBeenCalled,
                      "fetchAlbums with a successful downloaded artwork should call presentAlbumArtwork.")
        XCTAssertEqual(expectedArtwork.imageData, presenterSpy.observePresentAlbumArtwork?.imageData,
                       "The image data that's given upon success should be presented.")
        XCTAssertEqual(expectedArtwork.index, presenterSpy.observePresentAlbumArtwork?.index,
                       "The index that should be presented is 0.")
    }
}
