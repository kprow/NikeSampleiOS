//
//    ShowAlbumsWorkerTests.swift
//    NikeSampleiOS
//
//    Created by Andrew Koprowski on 6/28/20.
//    Copyright (c) 2020 Andrew Koprowski. All rights reserved.
//
//    This file was generated by the Clean Swift Xcode Templates so
//    you can apply clean architecture to your iOS and Mac projects,
//    see http://clean-swift.com
//

@testable import NikeSampleiOS
import XCTest

class ShowAlbumsWorkerTests: XCTestCase {
    // MARK: Subject under test

    var sut: ShowAlbumsWorker!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupShowAlbumsWorker()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupShowAlbumsWorker() {
        sut = ShowAlbumsWorker()
    }

    // MARK: Test doubles

    class ApiSpy: ITunesAPIProtocol {
        var hasFetchDataBeenCalled = false
        var injectableFetchDataResult: Result<Data, Error>?
        func fetchData(_ completionHandler: @escaping (Result<Data, Error>) -> Void) {
            hasFetchDataBeenCalled = true
            if let result = injectableFetchDataResult {
                completionHandler(result)
            }
        }
    }

    // MARK: Tests

    func testFetchFromApiCallsFetchData() {
        // Given
        let apiSpy = ApiSpy()
        sut.api = apiSpy
        // When
        sut.fetchFromAPI { (_) in
            // do nothing
        }
        // Then
        XCTAssertTrue(apiSpy.hasFetchDataBeenCalled,
                      "fetchFromAPI should call fetchData on the api.")
    }
    func testFetchFromApiWithErrorFromApiResultsInFailure() {
        // Given
        let apiSpy = ApiSpy()
        let givenError = ITunesRSSFeedGenerator.FeedError.noData
        apiSpy.injectableFetchDataResult = .failure(givenError)
        sut.api = apiSpy
        let fetchFromApiExpectation = expectation(description: "After the api calls the completion handler.")
        // When
        sut.fetchFromAPI { (result) in
            // Then
            switch result {
            case .success:
                XCTFail("We should not have success if an error occured")
            case .failure(let error):
                XCTAssertEqual(givenError, error as? ITunesRSSFeedGenerator.FeedError,
                "The given error should be returned in the failure.")
            }
            fetchFromApiExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0) { (err) in
            if let err = err {
                XCTFail("Waiting for expectation failed. \(err)")
            }
        }
    }
    func testFetchFromApiWithBadJsonResultsInFailure() {
        // Given
        let apiSpy = ApiSpy()
        let givenBadData = "{{}".data(using: .utf8) ?? Data()
        apiSpy.injectableFetchDataResult = .success(givenBadData)
        sut.api = apiSpy
        let fetchFromApiExpectation = expectation(description: "After the api calls the completion handler.")
        // When
        sut.fetchFromAPI { (result) in
            // Then
            switch result {
            case .success:
                XCTFail("We should not have success if the data is not in the correct format.")
            case .failure(let error):
                XCTAssertTrue(error is ShowAlbumsWorker.ApiError,
                "The error on failure should be an ApiError")
                XCTAssertEqual(.unableToParse, error as? ShowAlbumsWorker.ApiError)
            }
            fetchFromApiExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0) { (err) in
            if let err = err {
                XCTFail("Waiting for expectation failed. \(err)")
            }
        }
    }
    func testFetchFromApiWithNoResultsFails() {
        // Given
        let apiSpy = ApiSpy()
        let givenNoResultsData = "{}".data(using: .utf8) ?? Data()
        apiSpy.injectableFetchDataResult = .success(givenNoResultsData)
        sut.api = apiSpy
        let fetchFromApiExpectation = expectation(description: "After the api calls the completion handler.")
        // When
        sut.fetchFromAPI { (result) in
            // Then
            switch result {
            case .success:
                XCTFail("We should not have success if the data contains no results.")
            case .failure(let error):
                XCTAssertTrue(error is ShowAlbumsWorker.ApiError,
                "The error on failure should be an ApiError")
                XCTAssertEqual(.noResults, error as? ShowAlbumsWorker.ApiError)
            }
            fetchFromApiExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0) { (err) in
            if let err = err {
                XCTFail("Waiting for expectation failed. \(err)")
            }
        }
    }
    func testFetchFromApiSuccess() {
        // Given
        let apiSpy = ApiSpy()
        let givenResultsData = JsonForTests.rssJSON.data(using: .utf8) ?? Data()
        apiSpy.injectableFetchDataResult = .success(givenResultsData)
        sut.api = apiSpy
        let fetchFromApiExpectation = expectation(description: "After the api calls the completion handler.")
        // When
        sut.fetchFromAPI { (result) in
            // Then
            switch result {
            case .success(let albums):
                XCTAssertFalse(albums.isEmpty,
                               "fetchFromAPI with data containing results should return a non empty array of albums.")
            case .failure:
                XCTFail("We should not have failure if the data contains results.")
            }
            fetchFromApiExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0) { (err) in
            if let err = err {
                XCTFail("Waiting for expectation failed. \(err)")
            }
        }
    }
}
